@page "/Notes"

<MudTabs Elevation="1" Border="true" Outlined="true" Position=@Position.Top ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text=@getCurrentMarkdownTitleContents()>
        <MudTabs Elevation="2" Rounded="true" Position=@Position.Top ApplyEffectsToContainer="true" PanelClass="pa-6">
            <ChildContent>
                <MudTabPanel Icon=@Icons.Material.Filled.Create Text="Outline">
                    <MudTextField T="string" Label="Markdown" Variant="Variant.Filled" @bind-Text=@_currentMarkdown Lines=20 />
                </MudTabPanel>
                <MudTabPanel Icon=@Icons.Filled.RemoveRedEye Text="Markdown">
                    @generateMarkdown()
                </MudTabPanel> 
                <MudTabPanel Icon="@Icons.Filled.Difference" Text="Diff">
                    @generateDiff()
                </MudTabPanel>
            </ChildContent>
            <Header>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" style="padding: 1em;">
                    <MudButton @onclick=@clearCurrentMarkdown Disabled=@(string.IsNullOrEmpty(_currentMarkdown))>
                        <MudIcon Icon="@Icons.Filled.Clear" Title="Clear" Color=@Color.Error/>&nbsp;Clear
                    </MudButton>
                    <MudButton @onclick=@saveCurrentMarkdown Disabled=@(!markdownHasChangedSinceLastSave())>
                        <MudIcon Icon="@Icons.Material.Filled.Save" Title="Save" Color=@Color.Success />&nbsp;Save
                    </MudButton>
                </MudButtonGroup>
            </Header>
        </MudTabs>
    </MudTabPanel>
</MudTabs>

@code
{
    private string _currentNoteTitle = "New note";
    private string _currentMarkdown = string.Empty;
    private string _lastSavedMarkdown = string.Empty; // todo on page load

    private RenderFragment generateMarkdown() => renderFragmentBuilder =>
    {
        string content = string.IsNullOrEmpty(_currentMarkdown) ? "Nothing to show." : Markdown.ToHtml(_currentMarkdown);
        renderFragmentBuilder.AddMarkupContent(0, content);
    };

    private RenderFragment generateDiff() => renderFragmentBuilder =>
    {
        string content = !markdownHasChangedSinceLastSave() ? "Nothing to show." : Markdown.ToHtml(_currentMarkdown); // todo make this like a git diff.
        renderFragmentBuilder.AddMarkupContent(0, content);
    };

    private async Task clearCurrentMarkdown()
    {
        _currentMarkdown = string.Empty;
    }

    private async Task saveCurrentMarkdown()
    {
        return;
    }

    private string getCurrentMarkdownTitleContents()
    {
        if (markdownHasChangedSinceLastSave())
        {
            return "* " + _currentNoteTitle;
        }
        return _currentNoteTitle;
    }

    private bool markdownHasChangedSinceLastSave()
    {
        return !_lastSavedMarkdown.Equals(_currentMarkdown);
    }
}