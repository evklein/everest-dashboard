@page "/Notes"

<MudDynamicTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-4 py-6" AddTab=@addNoteTab CloseTab=@((panel) => closeNoteTab(panel)) AddIconToolTip="Click here to add a new tab" CloseIconToolTip="Close this tab. All data will be lost">
    @foreach (NoteTab item in _tabs)
    {
        <MudTabPanel Text=@item.Name Tag=@item.Id>
            <MudTabs Elevation="2" Rounded="true" Position=@Position.Top ApplyEffectsToContainer="true" PanelClass="pa-6">
                <ChildContent>
                    <MudTabPanel Icon=@Icons.Material.Filled.Create Text="Outline">
                        <MudTextField T="string" Label="Markdown" Variant="Variant.Filled" @bind-Text=@item.Markdown Lines=20 />
                    </MudTabPanel>
                    <MudTabPanel Icon=@Icons.Filled.RemoveRedEye Text="Markdown">
                        @((MarkupString) currentMarkdown)
                    </MudTabPanel> 
                    <MudTabPanel Icon="@Icons.Filled.Difference" Text="Diff">
                        @generateDiff()
                    </MudTabPanel>
                </ChildContent>
                <Header>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" style="padding: 1em;">
                        <MudButton @onclick=@clearCurrentMarkdown Disabled=@(string.IsNullOrEmpty(_currentMarkdown))>
                            <MudIcon Icon="@Icons.Filled.Clear" Title="Clear" Color=@Color.Error/>&nbsp;Clear
                        </MudButton>
                        <MudButton @onclick=@saveCurrentMarkdown Disabled=@(!markdownHasChangedSinceLastSave())>
                            <MudIcon Icon="@Icons.Material.Filled.Save" Title="Save" Color=@Color.Success />&nbsp;Save
                        </MudButton>
                    </MudButtonGroup>
                </Header>
            </MudTabs>
        </MudTabPanel>
    }
</MudDynamicTabs>>

@code
{
    private int _index = 0;
    private List<NoteTab> _tabs = new();
    private NoteTab _selectedNoteTab;
    private string _currentNoteTitle = "New note";
    private string _currentMarkdown = string.Empty;
    private string _lastSavedMarkdown = string.Empty; // todo on page load
    private bool _indexChanged = false;

    private string currentMarkdown => string.IsNullOrEmpty(_selectedNoteTab.Markdown) ? "Nothing to show." : Markdown.ToHtml(_selectedNoteTab.Markdown);


    private RenderFragment generateDiff() => renderFragmentBuilder =>
    {
        string content = !markdownHasChangedSinceLastSave() ? "Nothing to show." : Markdown.ToHtml(_currentMarkdown); // todo make this like a git diff.
        renderFragmentBuilder.AddMarkupContent(0, content);
    };

    private async Task clearCurrentMarkdown()
    {
        _currentMarkdown = string.Empty;
    }

    private async Task saveCurrentMarkdown()
    {
        return;
    }

    private string getCurrentMarkdownTitleContents()
    {
        if (markdownHasChangedSinceLastSave())
        {
            return "* " + _currentNoteTitle;
        }
        return _currentNoteTitle;
    }

    private bool markdownHasChangedSinceLastSave()
    {
        return !_lastSavedMarkdown.Equals(_currentMarkdown);
    }

    private void addNoteTab()
    {

        var newTab = new NoteTab { Name = "New note", Markdown = "" };
		_tabs.Add(newTab);
        _selectedNoteTab = newTab;
        _indexChanged = true;
    }

    private void closeNoteTab(MudTabPanel panel)
    {
		var tabView = _tabs.FirstOrDefault(x => x.Id == (Guid) panel.Tag);
		if(tabView != null)
		{
			_tabs.Remove(tabView);
		}    
    }

    protected override void OnAfterRender(bool firstRender)
	{
		if(_indexChanged == true)
		{
			_index = _tabs.Count - 1;
            StateHasChanged();
			_indexChanged = false;
		}
	}
}