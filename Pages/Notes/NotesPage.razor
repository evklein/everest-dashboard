@page "/Notes"

<MudContainer MaxWidth=@MaxWidth.ExtraLarge>
    <MudGrid Spacing="2">
        <MudItem xs="3">
            <MudPaper Elevation="2">
                <MudGrid>
                    <MudItem xs="12" Class="pb-1">
                        <MudTextField @bind-Value=@_fileSearchValue Immediate="true" Label="Search Files" Variant="Variant.Filled" Class="pa-2" />
                    </MudItem>
                    <MudItem xs="12" Style="height:70vh;" Class="pt-0 mr-3 overflow-auto">
                        <MudList Clickable="true">
                        @foreach (var note in _notes.Where(n => n.Title.Contains(_fileSearchValue, StringComparison.InvariantCultureIgnoreCase)))
                        {
                            <MudListItem
                                xs="12"
                                Dense=true
                                Text=@note.Title
                                Icon=@(noteIsOpen(note) ? Icons.Material.Filled.FileOpen : Icons.Material.Filled.Feed)
                                IconColor=@(note.ContentHasChanged ? Color.Success : Color.Default)
                                OnClick=@(() => addNoteTab(note))
                            />
                        }
                        </MudList>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="9">
        @if (_tabs.Any())
        {
            <MudDynamicTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" AddTab=@addNewNoteTab CloseTab=@((panel) => closeNoteTab(panel)) AddIconToolTip="Click here to add a new tab" CloseIconToolTip="Close this tab. All data will be lost">
            @foreach (NoteTab tab in _tabs)
            {
                <MudTabPanel Text=@(tab.Note.ContentHasChanged ? $"{tab.Note.Title}*" : tab.Note.Title) Tag=@tab.Note.Id>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="pa-2">
                        <MudButton @onclick=@(() => switchNoteView(NoteViewEnum.Outline)) Disabled=@(_noteView == NoteViewEnum.Outline) StartIcon=@Icons.Material.Filled.Create Variant=@Variant.Filled>Outline</MudButton>
                        <MudButton @onclick=@(() => switchNoteView(NoteViewEnum.Markdown)) Disabled=@(_noteView == NoteViewEnum.Markdown) StartIcon=@Icons.Material.Filled.RemoveRedEye Variant=@Variant.Filled>Markdown</MudButton>
                    </MudButtonGroup>
                        <MudButton Variant=@Variant.Filled Color=@Color.Success @onclick=@(() => saveNote(tab.Note)) Disabled=@(!tab.Note.ContentHasChanged) Class="ma-2" Style="float: right" StartIcon=@Icons.Material.Filled.Save>Save</MudButton>
                    <MudItem Class="pa-6">
                        @if (_noteView == NoteViewEnum.Outline)
                        {
                            <MudTextField Immediate="true" T="string" Label="Markdown" Variant="Variant.Filled" @bind-Text=@tab.Note.UpdatedContent Lines=20 />
                        }
                        @if (_noteView == NoteViewEnum.Markdown)
                        {
                            @((MarkupString) currentMarkdown)
                        }
                    </MudItem>
                </MudTabPanel>
            }
            </MudDynamicTabs>
        }
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private int _index = 0;
    private List<NoteTab> _tabs = new();
    private List<Note> _notes = new()
    {
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
    };

    private List<string> _notesToShow = new();
    private NoteTab _selectedNoteTab;
    private string _currentNoteTitle = "New note";
    private string _lastSavedMarkdown = string.Empty; // todo on page load
    private bool _indexChanged = false;
    private string _fileSearchValue = string.Empty;
    private NoteViewEnum _noteView = NoteViewEnum.Outline;

    private string currentMarkdown => string.IsNullOrEmpty(_selectedNoteTab.Note.Content)
        ? "Nothing to show." : Markdown.ToHtml(_selectedNoteTab.Note.Content);

    private bool noteIsOpen(Note note)
    {
        return _tabs.Where(tab => tab.Note.Id == note.Id).Any();
    }

    private void addNewNoteTab()
    {
        var newTab = new NoteTab(new Note());
        doCommonTabAddLogic(newTab);
    }

    private void addNoteTab(Note note)
    {
        var newTab = new NoteTab(note);
        if (noteIsOpen(note)) return;
        doCommonTabAddLogic(newTab);
    }

    private void doCommonTabAddLogic(NoteTab tab)
    {   
        _tabs.Add(tab);
        _selectedNoteTab = tab;
        _indexChanged = true;
    }

    private void closeNoteTab(MudTabPanel panel)
    {
		var tabView = _tabs.FirstOrDefault(x => x.Note.Id == (Guid) panel.Tag);
		if(tabView != null)
		{
			_tabs.Remove(tabView);
		}    
    }

    private void saveNote(Note note)
    {
        // Do save logic here.
    }

    protected override void OnAfterRender(bool firstRender)
	{
		if(_indexChanged == true)
		{
			_index = _tabs.Count - 1;
            StateHasChanged();
			_indexChanged = false;
		}
	}

    private void switchNoteView(NoteViewEnum noteView)
    {
        _noteView = noteView;
    }
}