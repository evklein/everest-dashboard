@page "/Notes"

<MudPaper Width="100%" Height="100%" Elevation="0" Class="d-inline-flex align-start flex-grow-1 gap-2">
    <MudPaper Class="d-flex flex-1 py-3" Elevation="1">
        <MudPaper Class="d-block" Elevation="0">
        <MudTextField @bind-Value=@_fileSearchValue Immediate="true" Label="Search Files" Variant="Variant.Filled" Class="pa-1"></MudTextField>
        <MudList Clickable="true">
            @foreach (var note in _notes.Where(n => n.Title.Contains(_fileSearchValue, StringComparison.InvariantCultureIgnoreCase)))
            {
                <MudListItem
                    Dense=true
                    Text=@note.Title
                    Icon=@(noteIsOpen(note) ? Icons.Material.Filled.FileOpen : Icons.Material.Filled.Feed)
                    IconColor=@(_tabs.Where(tab => tab.Note.Id == note.Id).Single().IconColor)
                    OnClick=@(() => addNoteTab(note))
                />
            }
        </MudList>
        </MudPaper>
    </MudPaper>
    @if (_tabs.Any())
    {
        <MudPaper Class="d-flex flex-1 py-3" Elevation="1">
            <MudDynamicTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-4 py-6" AddTab=@addNewNoteTab CloseTab=@((panel) => closeNoteTab(panel)) AddIconToolTip="Click here to add a new tab" CloseIconToolTip="Close this tab. All data will be lost">
            @foreach (NoteTab item in _tabs)
                {
                    <MudTabPanel Text=@item.Note.Title Tag=@item.Note.Id>
                        <MudTabs Elevation="2" Rounded="true" Position=@Position.Top ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <ChildContent>
                                <MudTabPanel Icon=@Icons.Material.Filled.Create Text="Outline">
                                    <MudTextField T="string" Label="Markdown" Variant="Variant.Filled" @bind-Text=@item.Note.Content Lines=20 />
                                </MudTabPanel>
                                <MudTabPanel Icon=@Icons.Filled.RemoveRedEye Text="Markdown">
                                    @((MarkupString) currentMarkdown)
                                </MudTabPanel> 
                                <MudTabPanel Icon="@Icons.Filled.Difference" Text="Diff">
                                    @generateDiff()
                                </MudTabPanel>
                            </ChildContent>
                            <Header>
                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" style="padding: 1em;">
                                    <MudButton @onclick=@clearCurrentMarkdown Disabled=@(string.IsNullOrEmpty(_currentMarkdown))>
                                        <MudIcon Icon="@Icons.Filled.Clear" Title="Clear" Color=@Color.Error/>&nbsp;Clear
                                    </MudButton>
                                    <MudButton @onclick=@saveCurrentMarkdown Disabled=@(!markdownHasChangedSinceLastSave())>
                                        <MudIcon Icon="@Icons.Material.Filled.Save" Title="Save" Color=@Color.Success />&nbsp;Save
                                    </MudButton>
                                </MudButtonGroup>
                            </Header>
                        </MudTabs>
                    </MudTabPanel>
                }
            </MudDynamicTabs>
        </MudPaper>
    }
</MudPaper>

@code
{
    private int _index = 0;
    private List<NoteTab> _tabs = new();
    private List<Note> _notes = new()
    {
        new Note() { Title = "Note #1", Content = "Content #1" },
        new Note() { Title = "Note #2", Content = "Content #2" },
        new Note() { Title = "Note #3", Content = "Content #3" },
    };

    private List<string> _notesToShow;
    private NoteTab _selectedNoteTab;
    private string _currentNoteTitle = "New note";
    private string _currentMarkdown = string.Empty;
    private string _lastSavedMarkdown = string.Empty; // todo on page load
    private bool _indexChanged = false;
    private string _fileSearchValue = string.Empty;
    private string _uneditedNoteContents = string.Empty;

    private string currentMarkdown => string.IsNullOrEmpty(_selectedNoteTab.Note.Content)
        ? "Nothing to show." : Markdown.ToHtml(_selectedNoteTab.Note.Content);

    private bool noteIsOpen(Note note)
    {
        return _tabs.Where(tab => tab.Note.Id == note.Id).Any();
    }

    private RenderFragment generateDiff() => renderFragmentBuilder =>
    {
        string content = !markdownHasChangedSinceLastSave() ? "Nothing to show." : Markdown.ToHtml(_currentMarkdown); // todo make this like a git diff.
        renderFragmentBuilder.AddMarkupContent(0, content);
    };

    private bool  markdownHasChanged()
    {
        bool hasChanged = _selectedNoteTab is not null &&
               !_selectedNoteTab.Note.Content.Equals(_uneditedNoteContents);
        if (hasChanged)
        return hasChanged;
    } 

    private async Task clearCurrentMarkdown()
    {
        _currentMarkdown = string.Empty;
    }

    private async Task saveCurrentMarkdown()
    {
        return;
    }

    private string getCurrentMarkdownTitleContents()
    {
        if (markdownHasChangedSinceLastSave())
        {
            return "* " + _currentNoteTitle;
        }
        return _currentNoteTitle;
    }

    private bool markdownHasChangedSinceLastSave()
    {
        return false;
    }

    private void addNewNoteTab()
    {
        var newTab = new NoteTab(new Note());
        doCommonTabAddLogic(newTab);
    }

    private void addNoteTab(Note note)
    {
        var newTab = new NoteTab(note);
        if (noteIsOpen(note)) return;
        doCommonTabAddLogic(newTab);
    }

    private void doCommonTabAddLogic(NoteTab tab)
    {   
        _uneditedNoteContents = tab.Note.Content;
        _tabs.Add(tab);
        _selectedNoteTab = tab;
        _indexChanged = true;
    }

    private void closeNoteTab(MudTabPanel panel)
    {
		var tabView = _tabs.FirstOrDefault(x => x.Note.Id == (Guid) panel.Tag);
		if(tabView != null)
		{
			_tabs.Remove(tabView);
		}    
    }

    protected override void OnAfterRender(bool firstRender)
	{
		if(_indexChanged == true)
		{
			_index = _tabs.Count - 1;
            StateHasChanged();
			_indexChanged = false;
		}
	}
}