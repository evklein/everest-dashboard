@page "/Notes"
@inject IHttpService httpService

<MudContainer MaxWidth=@MaxWidth.ExtraLarge>
    <MudGrid Spacing="2">
        <MudItem xs="3" Style="margin-top: 2px !important;">
            <MudPaper Elevation="2">
                <MudGrid>
                    <MudItem xs="12" Class="pb-1">
                        <MudTextField @bind-Value=@_fileSearchValue Immediate="true" Label="Search Files" Variant="Variant.Filled" Class="pa-2" />
                    </MudItem>
                    <MudItem xs="12" Style="height:70vh;" Class="pt-0 mr-3 overflow-auto">
                        <MudList Clickable="true">
                        @foreach (var note in _notes.Where(n => n.Title.Contains(_fileSearchValue, StringComparison.InvariantCultureIgnoreCase)))
                        {
                            <MudListItem
                                Dense=true
                                OnClick=@(() => addNoteTab(note))
                            >
                                @if (noteIsOpen(note))
                                {
                                    <MudIcon Class="pr-2" Icon=@Icons.Material.Filled.FileOpen Color=@(note.NoteHasChanged ? Color.Success : Color.Default) />
                                }
                                else
                                {
                                    <MudIcon Class="pr-2" Icon=@Icons.Material.Filled.Feed Color=@(note.NoteHasChanged ? Color.Success : Color.Default) />
                                }
                                @note.Title
                                <MudIconButton Icon=@Icons.Material.Filled.Delete Color=@Color.Error Size=@Size.Small Style="float:right" OnClick=@(() => deleteNote(note)) />
                            </MudListItem>
                        }
                        </MudList>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="9" Class="pt-0">
        @if (_tabs.Any())
        {
            <MudDynamicTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" AddTab=@addNewNoteTab CloseTab=@((panel) => closeNoteTab(panel)) AddIconToolTip="Click here to add a new tab" CloseIconToolTip="Close this tab. All data will be lost">
            @foreach (NoteTab tab in _tabs)
            {
                <MudTabPanel Tag=@tab.Note.Id>
                    <TabContent>
                        <MudText Typo="Typo.body1">
                            @if (tab.Note.NoteHasChanged)
                            {
                                <i>@tab.Note.UpdatedTitle*</i>
                            }
                            else if (string.IsNullOrEmpty(tab.Note.Title))
                            {
                                <i>New note</i>
                            }
                            else
                            {
                                @tab.Note.Title
                            }
                        </MudText>
                    </TabContent>
                    <ChildContent>
                        <MudGrid Spacing="2">
                            <MudItem xs="4">
                                <MudTextField Adornment=@Adornment.Start AdornmentIcon=@Icons.Filled.Title @bind-Value=@tab.Note.UpdatedTitle Label="Title" Variant="Variant.Outlined" Immediate="true" Class="pa-2" />
                            </MudItem>
                            <MudItem xs="3" Class="mt-4">
                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="pa-2">
                                    <MudButton @onclick=@(() => switchNoteView(NoteViewEnum.Outline)) Disabled=@(_noteView == NoteViewEnum.Outline) StartIcon=@Icons.Material.Filled.Create Variant=@Variant.Filled>Outline</MudButton>
                                    <MudButton @onclick=@(() => switchNoteView(NoteViewEnum.Markdown)) Disabled=@(_noteView == NoteViewEnum.Markdown) StartIcon=@Icons.Material.Filled.RemoveRedEye Variant=@Variant.Filled>Markdown</MudButton>
                                </MudButtonGroup>
                            </MudItem>
                            <MudItem xs="5" Class="mt-4">
                                <MudButton Variant=@Variant.Filled Color=@Color.Success @onclick=@(() => saveNote(tab.Note)) Disabled=@(!tab.Note.NoteHasChanged) Class="ma-2" Style="float: right" StartIcon=@Icons.Material.Filled.Save>Save</MudButton>
                            </MudItem>
                        </MudGrid>
                        <MudItem Class="pa-6">
                            @if (_noteView == NoteViewEnum.Outline)
                            {
                                <MudTextField Immediate="true" Label="Markdown" Variant="Variant.Outlined" @bind-Value=@tab.Note.UpdatedContent Lines=27 />
                            }
                            @if (_noteView == NoteViewEnum.Markdown)
                            {
                                @((MarkupString) currentMarkdown)
                            }
                        </MudItem>
                    </ChildContent>
                </MudTabPanel>
            }
            </MudDynamicTabs>
        }
        else
        {
            <MudButton @onclick=addNewNoteTab StartIcon=@Icons.Material.Filled.Create Variant=@Variant.Filled>Start new note</MudButton>
        }
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private int _index = 0;
    private List<NoteTab> _tabs = new();
    private List<Note> _notes = new()
    {
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
        new Note("Note #1", "Content #1"),
        new Note("Note #2", "Content #2"),
        new Note("Note #3", "Content #3"),
    };

    private List<string> _notesToShow = new();
    private NoteTab _selectedNoteTab;
    private string _currentNoteTitle = "New note";
    private string _lastSavedMarkdown = string.Empty; // todo on page load
    private bool _indexChanged = false;
    private string _fileSearchValue = string.Empty;
    private NoteViewEnum _noteView = NoteViewEnum.Outline;

    private string currentMarkdown => string.IsNullOrEmpty(_selectedNoteTab.Note.UpdatedContent)
        ? "Nothing to show." : Markdown.ToHtml(_selectedNoteTab.Note.UpdatedContent);

    private bool noteIsOpen(Note note)
    {
        return _tabs.Where(tab => tab.Note.Id == note.Id).Any();
    }

    private void addNewNoteTab()
    {
        var newTab = new NoteTab(new Note());
        doCommonTabAddLogic(newTab);
    }

    private void addNoteTab(Note note)
    {
        var newTab = new NoteTab(note);
        if (noteIsOpen(note)) return;
        doCommonTabAddLogic(newTab);
    }

    private void doCommonTabAddLogic(NoteTab tab)
    {
        _tabs.Add(tab);
        _selectedNoteTab = tab;
        _indexChanged = true;
    }

    private void closeNoteTab(MudTabPanel panel)
    {
        var tabView = _tabs.FirstOrDefault(x => x.Note.Id == (Guid) panel.Tag);
        if(tabView != null)
        {
            _tabs.Remove(tabView);
        }
    }

    private void closeNoteTab(Note note)
    {
        var tabView = _tabs.FirstOrDefault(x => x.Note.Id == note.Id);
        if (tabView != null)
        {
            _tabs.Remove(tabView);
        }
    }

    private void saveNote(Note note)
    {
        // Do save logic here.
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(_indexChanged == true)
        {
            _index = _tabs.Count - 1;
            StateHasChanged();
            _indexChanged = false;
        }
    }

    private void switchNoteView(NoteViewEnum noteView)
    {
        _noteView = noteView;
    }

    private void deleteNote(Note note)
    {
        // Call API

        closeNoteTab(note);
        _notes.Remove(note);
    }
    }