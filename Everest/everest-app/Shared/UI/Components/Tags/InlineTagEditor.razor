@inject ITagRepository TagRepository

<MudGrid Class="pl-2 py-0"
         Style="margin-bottom:-36px;margin-top:-28px;margin-left:4px;">
    @if (_isActivated)
    {
        <MudItem xs="2" Class="pt-1">
            <MudAutocomplete CoerceValue="true"
                             ValueChanged=@addTagToList
                             ResetValueOnEmptyText="true"
                             Margin=@Margin.Dense
                             Dense="true"
                             Variant=@Variant.Text
                             T="string"
                             SearchFunc=@searchTags
                             Adornment=@Adornment.Start
                             AdornmentIcon="@Icons.Filled.ArrowBack"
                             OnAdornmentClick=@deactivateComponent
                             AdornmentColor="Color.Secondary"
                             MaxItems="25" />
        </MudItem>
    }
    <MudItem xs=@(_isActivated ? 10 : 12)  Class="pl-0">
        <MudChipSet AllClosable="true" OnClose=@removeTagFromList>
            @if (!_isActivated)
            {
                <MudButton OnClick=@activateComponent
                           Variant="Variant.Text"
                           StartIcon=@Icons.Filled.Add
                           IconColor="Color.Secondary"
                           Size="Size.Medium">
                    Add tag
                </MudButton>
            }
            @if (SelectedTags is not null)
            {
                @foreach (var tag in SelectedTags)
                {
                    <MudChip @ondblclick=@(() => changeTagColor(tag))
                             Tag=@tag
                             Text=@tag.Name
                             Style="@($"background-color:{tag.ColorHexadecimal} !important;")" />
                }
            }
        </MudChipSet>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public ICollection<Tag> SelectedTags { get; set; } = new List<Tag>();

    private Tag _newPlaceholderTag = new Tag();
    private bool _isActivated = false;

    private void activateComponent()
    {
        _isActivated = true;
    }

    private void deactivateComponent()
    {
        _isActivated = false;
    }

    private async Task addTagToList(string value)
    {
        if (!string.IsNullOrEmpty(value) && !SelectedTags.Where(st => st.Name.Equals(value, StringComparison.CurrentCultureIgnoreCase)).Any())
        {
            var existingTagResponseWrapper = await TagRepository.GetTag(value);
            if (existingTagResponseWrapper.Success)
            {
                var existingUserTag = existingTagResponseWrapper.Value;
                if (existingUserTag is not null)
                {
                    SelectedTags.Add(existingUserTag);
                }
                else
                {
                    SelectedTags.Add(new Tag() { Name = value });
                }
            }
            else
            {
                // TODO: Log/maybe throw an exception.
            }
        }
    }

    private void removeTagFromList(MudChip chip)
    {
        SelectedTags.Remove((Tag)chip.Tag);
    }

    private async Task<IEnumerable<string>> searchTags(string searchValue)
    {
        List<Tag> tagListToFilter = new List<Tag>();
        string parsedSearchValue = EmojiStringParser.ParseEmojisInText(searchValue);

        RepositoryResponseWrapper<List<Tag>> tagFetchResponseWrapper = await TagRepository.ListTagsForUserWithExclusionsAndSearchValue(SelectedTags.ToList(), parsedSearchValue);
        if (tagFetchResponseWrapper.Success)
        {
            tagListToFilter = tagFetchResponseWrapper.Value;
        }
        else
        {
            // TODO: Log/maybe throw an exception.
        }

        // Handle empty search
        if (string.IsNullOrEmpty(parsedSearchValue))
            return tagListToFilter.Select(t => t.Name);

        // Handle new-Tag placeholder
        if (!tagListToFilter.Where(t => t.Name.Equals(parsedSearchValue, StringComparison.InvariantCultureIgnoreCase)).Any())
        {
            _newPlaceholderTag.Name = parsedSearchValue;
            if (!tagListToFilter.Contains(_newPlaceholderTag) && !string.IsNullOrEmpty(parsedSearchValue))
            {
                tagListToFilter.Insert(0, _newPlaceholderTag);
            }
        }

        return tagListToFilter.Select(t => t.Name).ToList();
    }

    private void changeTagColor(Tag tag)
    {
        Random random = new Random();
        int newColor = random.Next(16777215);
        string hexedColorCode = $"#{newColor.ToString("X")}";
        tag.ColorHexadecimal = hexedColorCode;
    }
}

