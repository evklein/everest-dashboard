@inject IUserAgentRepository UserAgentRepository
@inject ISnackbar MudSnackbar

<MudTable Items=@_userAgents
          Loading=@_loading
          LoadingProgressColor=Color.Secondary
          Dense="false"
          Hover="true"
          Bordered="false"
          Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">User Agents</MudText>
    </ToolBarContent>
    <ColGroup>
        <col style="width:350px;" />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<UserAgent, object>(t => t.Id)">Tag</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserAgent, object>(t => t.Key)">Key</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserAgent, object>(t => t.LastPing)">Last Ping</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserAgent, object>(t => t.Owner.UserName)">Owner</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Key">@context.Key</MudTd>
        <MudTd DataLabel="Last Ping">@context.LastPing</MudTd>
        <MudTd DataLabel="Owner">@context.Owner.UserName</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string filterString = string.Empty;
    private List<UserAgent> _userAgents = new List<UserAgent>();
    private bool _loading = true;

    protected override void OnInitialized()
    {
        RepositoryResponseWrapper<List<UserAgent>> fetchUserAgentsResponseWrapper = UserAgentRepository.GetUserAgents();
        if (fetchUserAgentsResponseWrapper.Success)
        {
            _userAgents = fetchUserAgentsResponseWrapper.Value.OrderBy(t => t.Id).ToList();
        }
        else
        {
            MudSnackbar.Add(fetchUserAgentsResponseWrapper?.Error?.ErrorMessage, Severity.Error);
        }

        _loading = false;
        StateHasChanged();
    }
}