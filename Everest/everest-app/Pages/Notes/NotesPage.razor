@page "/Notes"
@inject IDialogService DialogService
@inject INotesRepository NotesRepository
@inject ISnackbar MudSnackbar

@using System.Linq

<MudContainer MaxWidth=@MaxWidth.ExtraLarge>
    <MudGrid Spacing="2">
        <MudItem xs="3"
                 Style="margin-top: 2px !important;">
            <MudPaper Elevation="2">
                <MudGrid>
                    <MudItem xs="12"
                             Class="pb-1">
                        <MudTextField @bind-Value=@_fileSearchValue
                                      Immediate=true
                                      Label="Search Files"
                                      Variant=@Variant.Filled
                                      Adornment=@Adornment.Start
                                      AdornmentIcon=@Icons.Filled.Search
                                      AdornmentColor=@Color.Primary
                                      Class="pa-2" />
                    </MudItem>
                    <MudItem xs="12"
                             Style="height:70vh;"
                             Class="pt-0 mr-3 overflow-auto">
                        <MudList Clickable=true>
                            @foreach (var noteListItem in _noteListItems.Where(n => n.NoteTitle.Contains(_fileSearchValue, StringComparison.InvariantCultureIgnoreCase)))
                            {
                                <MudListItem Dense=true
                                             OnClick=@(() => addNoteTab(noteListItem.NoteId))>
                                    @if (noteIsOpen(noteListItem.NoteId))
                                    {
                                        <MudIcon Class="pr-2"
                                                 Icon=@Icons.Material.Filled.FileOpen
                                                 Color=@Color.Secondary />
                                    }
                                    else
                                    {
                                        <MudIcon Class="pr-2"
                                                 Icon=@Icons.Material.Filled.Feed
                                                 Color=@Color.Primary />
                                    }

                                    @noteListItem.NoteTitle
                                    <MudIconButton Icon=@Icons.Material.Filled.Delete
                                                   Color=@Color.Error
                                                   Size=@Size.Small
                                                   Style="float:right"
                                                   OnClick=@(() => openDeleteDialog(noteListItem.NoteId, noteListItem.NoteTitle)) />
                                    @for (int i = 0; i <= noteListItem.NumberOfTagsToShow - 1; i++)
                                    {
                                        <MudChip Text=@noteListItem.NoteTags.ToList()[i].Name
                                                 Style="@($"background-color:{noteListItem.NoteTags.ElementAt(i).ColorHexadecimal} !important;")" />
                                    }
                                </MudListItem>
                            }
                        </MudList>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="9"
                 Class="pt-0">
            @if (_tabs.Any())
            {
                <MudDynamicTabs Elevation="2"
                                Rounded=true
                                ApplyEffectsToContainer=true
                                @bind-ActivePanelIndex=@_latestTabIndex
                                AddTab=@addNewNoteTab
                                CloseTab=@((panel) => closeNoteTab((Guid) panel.Tag))
                                AddIconToolTip="Click here to add a new tab"
                                CloseIconToolTip="Close this tab. All data will be lost">
                    @foreach (NoteTab tab in _tabs)
                    {
                        <MudTabPanel Tag=@tab.Note.Id>
                            <TabContent>
                                <MudText Typo="Typo.body1">
                                    @if (tab.Note.NoteHasChanged())
                                    {
                                        <i>@tab.Note.UpdatedTitle*</i>
                                    }
                                    else if (string.IsNullOrEmpty(tab.Note.Title))
                                    {
                                        <i>New note</i>
                                    }
                                    else
                                    {
                                        @tab.Note.Title
                                    }
                                </MudText>
                            </TabContent>
                            <ChildContent>
                                <MudGrid Spacing="2">
                                    <MudItem xs="4">
                                        <MudTextField Adornment=@Adornment.Start
                                                      AdornmentIcon=@Icons.Filled.Title
                                                      AdornmentColor=@Color.Primary
                                                      @bind-Value=@tab.Note.UpdatedTitle
                                                      Label="Title"
                                                      Variant=@Variant.Outlined
                                                      Immediate=true
                                                      Class="pa-2"
                                                      Required="true"
                                                      RequiredError="Note must have a title" />
                                    </MudItem>
                                    <MudItem xs="3" Class="mt-4">
                                        <MudButtonGroup Color=@Color.Primary
                                                        Variant=@Variant.Outlined
                                                        Class="pa-2">
                                            <MudButton @onclick=@(() => tab.NoteView = NoteViewEnum.Outline)
                                                       Disabled=@(tab.NoteView == NoteViewEnum.Outline)
                                                       StartIcon=@Icons.Material.Filled.Create
                                                       Variant=@Variant.Filled>
                                                Outline
                                            </MudButton>
                                            <MudButton @onclick=@(() => tab.NoteView = NoteViewEnum.Split)
                                                       Disabled=@(tab.NoteView == NoteViewEnum.Split)
                                                       StartIcon=@Icons.Filled.VerticalSplit
                                                       Variant=@Variant.Filled>
                                                Split
                                            </MudButton>
                                            <MudButton @onclick=@(() => tab.NoteView = NoteViewEnum.Markdown)
                                                       Disabled=@(tab.NoteView == NoteViewEnum.Markdown)
                                                       StartIcon=@Icons.Material.Filled.RemoveRedEye
                                                       Variant=@Variant.Filled>
                                                Markdown
                                            </MudButton>
                                        </MudButtonGroup>
                                    </MudItem>
                                    <MudItem xs="5"
                                             Class="mt-4">
                                        <MudButton Variant=@Variant.Filled
                                                   Color=@Color.Secondary
                                                   @onclick=@(() => saveNoteInTab(tab))
                                                   Disabled=@(!tab.Note.NoteHasChanged() || string.IsNullOrEmpty(tab.Note.UpdatedTitle))
                                                   Class="ma-2"
                                                   Style="float: right"
                                                   StartIcon=@Icons.Material.Filled.Save>
                                            Save
                                        </MudButton>
                                        @if (tab.Loading)
                                        {
                                            <MudProgressCircular Class="ma-3" Style="float: right" Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                                        }
                                    </MudItem>
                                    <MudItem xs="12">
                                        <InlineTagEditor SelectedTags=@tab.Note.UpdatedTags ParentStateChanged=@StateHasChanged/>
                                    </MudItem>
                                </MudGrid>
                                <MudItem Class="pa-6">
                                    @if (tab.NoteView == NoteViewEnum.Outline)
                                    {
                                        <MudTextField Immediate=true
                                                      Label="Outline"
                                                      Variant=@Variant.Outlined
                                                      @bind-Value=@tab.Note.UpdatedContent
                                                      Lines=27 />
                                    }
                                    @if (tab.NoteView == NoteViewEnum.Split)
                                    {
                                        <MudItem xs="12">
                                            <MudGrid Spacing="1">
                                                <MudItem xs="6">
                                                    <MudTextField Immediate=true
                                                                  Label="Outline"
                                                                  Variant=@Variant.Outlined
                                                                  @bind-Value=@tab.Note.UpdatedContent
                                                                  Lines=27 />
                                                </MudItem>
                                                <MudItem xs="6" Style="border: 1px solid #cccccc; border-radius: 5px; margin-top: 10px;" Class="pa-3 mb-1">
                                                    <MudMarkdown Value=@(String.IsNullOrEmpty(tab.Note.UpdatedContent) ? "Nothing to show." : tab.Note.UpdatedContent) />
                                                </MudItem>
                                            </MudGrid>
                                        </MudItem>
                                    }
                                    @if (tab.NoteView == NoteViewEnum.Markdown)
                                    {
                                        <MudDivider Class="mb-2" />
                                        <MudMarkdown Value=@(String.IsNullOrEmpty(tab.Note.UpdatedContent) ? "Nothing to show." : tab.Note.UpdatedContent) />
                                    }
                                </MudItem>
                            </ChildContent>
                        </MudTabPanel>
                    }
                </MudDynamicTabs>
            }
            else
            {
                <MudButton @onclick=addNewNoteTab
                           StartIcon=@Icons.Material.Filled.Create
                           Variant=@Variant.Filled
                           Color=@Color.Primary>
                    Start new note
                </MudButton>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private string _fileSearchValue = string.Empty;
    private int _latestTabIndex = 0;
    private bool _indexChanged = false;

    private List<NoteListItem> _noteListItems = new();
    private List<NoteTab> _tabs = new();

    protected override async Task OnInitializedAsync()
    {
        RepositoryResponseWrapper<List<NoteListItem>> notesListFetchResponseWrapper = await NotesRepository.ListNotes();
        if (notesListFetchResponseWrapper.Success)
        {
            _noteListItems = notesListFetchResponseWrapper.Value;
        }
        else
        {
            MudSnackbar.Add(notesListFetchResponseWrapper?.Error?.ErrorMessage, Severity.Error);
        }

        // initializePageRequestTimer();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_indexChanged == true)
        {
            _latestTabIndex = _tabs.Count - 1;
            StateHasChanged();
            _indexChanged = false;
        }
    }

    private void initializePageRequestTimer()
    {
        int _autoSaveInterval = 90_000;
        System.Threading.Timer timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            _tabs.ForEach(async tab =>
            {
                if (tab.Note.NoteHasChanged() && !string.IsNullOrEmpty(tab.Note.UpdatedTitle))
                {
                    await InvokeAsync(() => saveNoteInTab(tab));
                }
            });
        }, new System.Threading.AutoResetEvent(false), _autoSaveInterval, _autoSaveInterval);
    }

    #region Tab Behaviors
    private bool noteIsOpen(Guid noteId)
    {
        try
        {
            var tabWithSpecifiedNote = _tabs.Where(tab => tab.Note.Id == noteId).SingleOrDefault();
            return tabWithSpecifiedNote is not null;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void addNewNoteTab()
    {
        var newTab = new NoteTab(new Note() { Tags = new List<Tag>() });
        doCommonTabAddLogic(newTab);
    }

    private async void addNoteTab(Guid noteId)
    {
        if (noteIsOpen(noteId)) return;

        RepositoryResponseWrapper<Note> responseWrapper = await NotesRepository.GetNoteDetailsAsync(noteId);
        if (responseWrapper.Success)
        {
            var note = responseWrapper.Value;
            var newTab = new NoteTab(note);
            doCommonTabAddLogic(newTab);
        }
        else
        {
            MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
        }
    }

    private void doCommonTabAddLogic(NoteTab tab)
    {
        _tabs.Add(tab);
        _indexChanged = true;
        StateHasChanged();
    }

    private void closeNoteTab(Guid noteId)
    {
        var tabView = _tabs.FirstOrDefault(x => x.Note.Id == noteId);
        if (tabView is not null)
        {
            _tabs.Remove(tabView);
        }

        StateHasChanged(); // TODO: Is this necessary???
    }
    #endregion

    #region Page requests
    private async Task saveNoteInTab(NoteTab noteTab)
    {
        noteTab.Loading = true;
        StateHasChanged();

        RepositoryResponseWrapper<SaveNoteResponseDataTransferObject> responseWrapper = await NotesRepository.SaveNoteAsync(noteTab.Note);
        if (responseWrapper.Success)
        {
            SaveNoteResponseDataTransferObject responseObject = responseWrapper.Value;
            _noteListItems = responseObject.NoteListItems;

            var updatedNote = _noteListItems.FirstOrDefault(nli => nli.NoteId == noteTab.Note.Id);
            var selectedTab = _tabs.FirstOrDefault(t => t.Note.Id == noteTab.Note.Id);
            if (selectedTab is not null && updatedNote is not null) selectedTab.Note = responseObject.SavedNote;
        }
        else
        {
            MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
        }

        noteTab.Loading = false;
        StateHasChanged();
    }

    private async Task openDeleteDialog(Guid noteId, string noteTitle)
    {
        var parameters = new DialogParameters();
        parameters.Add("NoteTitle", noteTitle);
        var dialogResult = await DialogService.Show<DeleteNoteDialog>("Delete Note", parameters).Result;

        if (!dialogResult.Cancelled)
        {
            await deleteNote(noteId);
        }
    }

    private async Task deleteNote(Guid noteId)
    {
        RepositoryResponseWrapper<List<NoteListItem>> responseWrapper = await NotesRepository.DeleteNoteAsync(noteId);
        if (responseWrapper.Success)
        {
            closeNoteTab(noteId);
            _noteListItems = responseWrapper.Value;
            StateHasChanged();
        }
        else
        {
            MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
        }
    }
    #endregion
}