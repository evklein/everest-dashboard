@page "/ToDo"
@inject IToDoRepository ToDoRepository
@inject ISnackbar MudSnackbar
 
<MudContainer MaxWidth=@MaxWidth.Medium>
    <MudGrid Spacing="2">
        <MudItem xs="4">
            <MudCheckBox @bind-Checked=@_showCompletedItems
                         Label="Show completed tasks"
                         Dense="true"
                         Color=@Color.Secondary />
            <MudCheckBox @bind-Checked=@_showTags
                         Label="Show tags"
                         Dense="true"
                         Color=@Color.Secondary />
        </MudItem>
        <MudItem xs="6">
            <MudSelect
                @bind-Value=@_selectedDisplayPolicy
                Label="Show tasks completed in last..."
                Placeholder="Select value"
                AdornmentIcon=@Icons.Filled.CalendarMonth
                Variant="Variant.Outlined"
                Dense="true"
            >
                <MudSelectItem OnClick=@updateToDoList Value=@ToDoHistoricalDisplayPolicy.OneDay>Day</MudSelectItem>
                <MudSelectItem OnClick=@updateToDoList Value=@ToDoHistoricalDisplayPolicy.ThreeDays>Three days</MudSelectItem>
                <MudSelectItem OnClick=@updateToDoList Value=@ToDoHistoricalDisplayPolicy.OneWeek>Week</MudSelectItem>
                <MudSelectItem OnClick=@updateToDoList Value=@ToDoHistoricalDisplayPolicy.OneMonth>Month</MudSelectItem>
                <MudSelectItem OnClick=@updateToDoList Value=@ToDoHistoricalDisplayPolicy.OneYear>Year</MudSelectItem>
                <MudSelectItem OnClick=@updateToDoList Value=@ToDoHistoricalDisplayPolicy.All>All</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="10">
            <MudTextField
                @key="_textFieldKey"
                AdornmentIcon=@Icons.Filled.Checklist
                AdornmentColor=@Color.Primary
                Adornment=@Adornment.Start
                Label="Enter a task"
                Class="pa-2"
                @bind-Value=_newToDoItemName
                OnKeyDown=@createNewToDoItem
                Immediate="true"
                Variant=@Variant.Outlined
                AutoFocus="true"
             />
        </MudItem>
        @foreach (var toDoItem in _filteredtoDoItems)
        {
            <MudItem xs="10" Class=@(_showTags ? "mb-9" : "")>
                <MudPaper Elevation="2">
                    <MudCheckBox T="string"
                                 Checked=@toDoItem.Complete.ToString()
                                 CheckedChanged=@(() => toggleCompletionOfToDoItem(toDoItem))
                                 Color=@Color.Primary
                                 Style="width: 93%;">
                        <MudText Typo="Typo.body1" Class="mt-2" Style="display: inline-flex;">
                            @toDoItem.Name
                            <MudItem Style="float: right; display: inline-flex; margin-top: -8px;">
                                @if (toDoItem.Complete)
                                {
                                    <MudChip Icon=@Icons.Filled.Check
                                             IconColor=@Color.Success
                                             Label="true"
                                             Color=@Color.Default>
                                        Completed on @toDoItem.DateCompleted.ToShortDateString()
                                    </MudChip>
                                }
                            </MudItem>
                        </MudText>
                    </MudCheckBox>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Style="float: right;">
                        <MudMenuItem>Edit</MudMenuItem>
                        <MudMenuItem Style="color: #b73a27" OnClick=@(() => deleteToDoItem(toDoItem))>Delete</MudMenuItem>
                    </MudMenu>
                    @if (_showTags)
                    {
                        <InlineTagEditor ParentStateChanged=@(() => updateItemAfterTagUpdate(toDoItem)) SelectedTags=@toDoItem.Tags />
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code
{
    private bool _showCompletedItems = true;
    private bool _showTags = true;
    private ToDoHistoricalDisplayPolicy _selectedDisplayPolicy = ToDoHistoricalDisplayPolicy.OneWeek;
    private string _newToDoItemName = string.Empty;
    private List<ToDoItem> _toDoItems = new();
    private int _textFieldKey = 0;
    private List<ToDoItem> _filteredtoDoItems => _showCompletedItems ? _toDoItems : _toDoItems.Where(t => !t.Complete).ToList();
    private List<Tag> tags = new();

    protected override async Task OnInitializedAsync()
    {
        await updateToDoList();
    }

    private async Task updateToDoList()
    {
        RepositoryResponseWrapper<List<ToDoItem>> responseWrapper = await ToDoRepository.ListToDoItems(_selectedDisplayPolicy);
        if (responseWrapper.Success)
        {
            _toDoItems = responseWrapper.Value;
            StateHasChanged();
        }
        else
        {
            MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
        }
    }

    private async Task createNewToDoItem(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Enter")
        {
            if (string.IsNullOrEmpty(_newToDoItemName)) return;

            RepositoryResponseWrapper<List<ToDoItem>> responseWrapper = await ToDoRepository.SaveToDoItem(
                new ToDoItem()
                {
                    Name = _newToDoItemName,
                    DateCreated = DateTime.UtcNow,
                },
                _selectedDisplayPolicy
            );
            if (responseWrapper.Success)
            {
                _newToDoItemName = string.Empty;
                _toDoItems = responseWrapper.Value;
                _textFieldKey++; // Hack: Updates MudTextField on Enter
                StateHasChanged();
            }
            else
            {
                MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task toggleCompletionOfToDoItem(ToDoItem toDoItem)
    {
        toDoItem.Complete = !toDoItem.Complete;
        await updateToDoItem(toDoItem);
    }

    private async Task updateToDoItem(ToDoItem toDoItem)
    {
        RepositoryResponseWrapper<List<ToDoItem>> responseWrapper = await ToDoRepository.SaveToDoItem(toDoItem, _selectedDisplayPolicy);
        if (responseWrapper.Success)
        {
            _toDoItems = responseWrapper.Value;
            StateHasChanged();
        }
        else
        {
            MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
        }
    }

    private async Task deleteToDoItem(ToDoItem toDoItem)
    {
        RepositoryResponseWrapper<List<ToDoItem>> responseWrapper = await ToDoRepository.DeleteToDoItem(toDoItem, _selectedDisplayPolicy);
        if (responseWrapper.Success)
        {
            _toDoItems = responseWrapper.Value;
            StateHasChanged();
        }
        else
        {
            MudSnackbar.Add(responseWrapper?.Error?.ErrorMessage, Severity.Error);
        }
    }

    private async Task updateItemAfterTagUpdate(ToDoItem toDoItem)
    {
        await updateToDoItem(toDoItem);
        StateHasChanged();
    }
}

